ARG NODE_VERSION
ARG BUILDPLATFORM=${BUILDPLATFORM:-amd64}
FROM --platform=${BUILDPLATFORM} node:${NODE_VERSION}-alpine AS install

# NPM ci first, as to NOT invalidate previous steps except for when package.json changes
WORKDIR /app/binocular-frontend

RUN --mount=type=bind,target=/frontend-mem-nag.sh,src=./docker/frontend-mem-nag.sh \
    /frontend-mem-nag.sh

RUN --mount=type=bind,target=./package-lock.json,src=./package-lock.json,readonly \
    --mount=type=bind,target=./package.json,src=./package.json,readonly \
    npm ci --no-optional && \
    npm cache clean --force
RUN wget https://gobinaries.com/tj/node-prune --output-document - | /bin/sh && node-prune


FROM --platform=${BUILDPLATFORM} node:${NODE_VERSION}-alpine AS builder
ARG NPM_BUILD_CMD="build:dev"
ENV BUILD_CMD=${NPM_BUILD_CMD} 
ENV NODE_ENV=production
ENV NODE_OPTIONS=--max_old_space_size=4096
ENV GENERATE_SOURCEMAP=false

WORKDIR /app/binocular-frontend

COPY --from=install --chown=node:node /app/binocular-frontend/node_modules ./node_modules

COPY --chown=node:node ./ui ./ui

# This seems to be the most expensive step
RUN --mount=type=bind,target=./webpack.dev.js,src=./webpack.dev.js,readonly \
    --mount=type=bind,target=./webpack.common.js,src=./webpack.common.js,readonly \
    --mount=type=bind,target=./babel.config.json,src=./babel.config.json,readonly \
    --mount=type=bind,target=./package.json,src=./package.json,readonly \
    --mount=type=bind,target=./binocular.js,src=./binocular.js,readonly \
    npm run ${BUILD_CMD}

FROM nginx:1.25.3-alpine as ngx

# copying compiled code from dist to nginx folder for serving
COPY  --from=builder --chown=node:node /app/binocular-frontend/dist /usr/share/nginx/html

# copying nginx config from local to image
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf

# exposing internal port
EXPOSE 80
