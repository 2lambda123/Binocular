ARG NODE_VERSION
ARG BUILDPLATFORM=${BUILDPLATFORM:-amd64}
FROM --platform=${BUILDPLATFORM} node:${NODE_VERSION}-alpine AS install

# NPM ci first, as to NOT invalidate previous steps except for when package.json changes
WORKDIR /app/binocular

RUN --mount=type=bind,src=./docker/frontend-mem-nag.sh,target=/frontend-mem-nag.sh \
  /frontend-mem-nag.sh

RUN --mount=type=bind,src=./package-lock.json,target=./package-lock.json,readonly \
    --mount=type=bind,src=./package.json,target=./package.json,readonly \
    npm ci && \
    npm cache clean --force
RUN wget https://gobinaries.com/tj/node-prune --output-document - | /bin/sh && node-prune

###
FROM --platform=${BUILDPLATFORM} node:${NODE_VERSION}-alpine AS builder
ENV NODE_ENV=production
ENV NODE_OPTIONS=--max_old_space_size=4096
ENV GENERATE_SOURCEMAP=false

RUN apk add git

WORKDIR /app/binocular

COPY --from=install --chown=node:node /app/binocular/node_modules ./node_modules

COPY --chown=node:node ./cli ./cli
COPY --chown=node:node ./lib ./lib
COPY --chown=node:node ./services ./services
COPY --chown=node:node ./foxx ./foxx
COPY --chown=node:node ./binocular.js ./
COPY --chown=node:node ./cli.js ./
COPY --chown=node:node ./package.json ./package.json

RUN npm install -g .
RUN npm install -g tsx

RUN mkdir -p /app/binocular/lib/../ui/db_export
RUN mkdir -p /app/binocular/lib/../ui/config

RUN chown node:node -R /app/binocular/lib/../ui

RUN mkdir -p /app/binocular/repo
RUN chmod /app/binocular/repo

RUN git config --global --add safe.directory /app/binocular/repo/*

USER node

# ENTRYPOINT ["/usr/bin/dumb-init", "--", "/entrypoint"]
# CMD []
